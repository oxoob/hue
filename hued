#!/usr/bin/perl -w 

# use clauses
use strict;
use POSIX;
use File::stat;
use File::Copy;
use DateTime;
use Astro::Sunrise;
use Data::Dumper;

# global variables
my %config;
my %lights;
my %suncycle;
my $pause;
my $hue;
my $clouds; # global var for storing cloudiness (so it does not have to be checked all the time)

my $start_time;
my $end_time;
my $run_time;

# daemon control variables
my $i_should_run;
my $i_should_rerun;
my $i_should_dump_config;
my $i_should_reload_config;
my $i_caught_a_signal;
my $last_minute = 99; # initialize to an impossible value 
my $pid;
my $child_pid;
my $timeout = 20;

# external commands
my $curl = "/usr/bin/curl"; 

# some needed defaults:
$config{'config'}{'logging'}{'hue_log'}   = "/var/log/hue/hued.log";
$config{'config'}{'logging'}{'hue_state'} = "/var/log/hue/hued.state";

# read the config file  
sub open_hue_file($) {
        my $f_hue = shift;
        my $fh_hue;
        my $line;
	my $key_A;
	my $key_B;
	printt ("Opening hue file \"$f_hue\", and loading data...\n");
        if (open($fh_hue, "<$f_hue")) {
        	while ($line = readline($fh_hue)) {
			chomp($line);
			$line =~ s/\s*#.*//; # remove comments
			if ($line =~ /^\[(\S+)\]\s*$/) {
				$key_A = $1;
			}	
			if ($line =~ /^\s*(\S+):\s*$/) {
				$key_B = $1;
			}	
			if ($line =~ /^\s*(\S+)\s*=\s*(.*)\s*$/) {
				$config{$key_A}{$key_B}{$1} = $2;
				# print ("Added to config : $key_A - $key_B -> $1 => $2\n");
			}
		}
        	close $fh_hue;
        } else {
		printt ("No config file found, running empty\n");
	}	
}

# a very! basic function to attempt to emulate dawn and dusk's increase and decrease in light
# expressed in a value from 0 to 100 (a percentage), 0 is light, 100 is dark. same as cloudiness
sub calculate_suncycle($) {
	my $suncycle_ref = shift;
	my $rise    = sun_rise($config{'config'}{'location'}{'long'},$config{'config'}{'location'}{'lat'});
	my $sunrise = int(mins($rise));
	my $set     = sun_set($config{'config'}{'location'}{'long'},$config{'config'}{'location'}{'lat'});
	my $sunset  = int(mins($set));
	# just a ballpark attempt at guessing the length of dusk or dawn in minutes (related to latitude)
	my $length  = int(5 + 50 * sin(3.1415 * $config{'config'}{'location'}{'lat'} / 180));
	printt("Calculating suncycle. Sunrise: $sunrise ($rise) Sunset: $sunset ($set)\n");

	# night
	for (my $minute = 0; $minute < int($sunrise - $length/2); $minute++) {
		$$suncycle_ref{$minute} = 100;
	}
	# sunrise
	for (my $minute = int($sunrise - $length/2); $minute < int($sunrise + $length/2); $minute++) {
		my $val = int (50 + 50 * cos(($minute - ($sunrise - $length/2))/$length * 3.1415)); 
		$$suncycle_ref{int($minute - $sunrise - $length/2)} = $val;
	}	
	# day
	for (my $minute = int($sunrise + $length/2); $minute < int($sunset - $length/2); $minute++) {
		$$suncycle_ref{$minute} = 0;
	}
	# sunset
	for (my $minute = int($sunset - $length/2); $minute < int($sunset + $length/2); $minute++) {
		my $val = int (50 - 50 * cos(($minute - ($sunset - $length/2))/$length * 3.1415)); 
		$$suncycle_ref{int($minute - $sunset - $length/2)} = $val;
	}	
	# night
	for (my $minute = int($sunset + $length/2); $minute < 86400; $minute++) {
		$$suncycle_ref{$minute} = 100;
	}
}

# search a value in an array, both numerical as alfa
sub in($$) {
	my $search  = shift;
	my $arr_ref = shift;
	foreach (@$arr_ref) {
		return 1 if ($search eq $_);
		return 1 if ($search == $_);
	}
	return 0;
}	

# convert HH:MM to seconds; :SS is ignored, which means it's rounded to the minute
sub mins($) {
	my $hhmm = shift;
	my ($hh,$mm,$ss) = split (":", $hhmm);
	return ($hh * 60) + $mm;
}	

# minmax, prevent a value for exceeding the given minimum or maximum
sub minmax($$$) {
	my $val_ref = shift;
	my $min = shift;
	my $max = shift;
	$$val_ref = $min if ($$val_ref < $min);
	$$val_ref = $max if ($$val_ref > $max);
}	

# sorting function to sort schedules by start_time
sub by_start_time {
	mins($config{'schedule'}{$a}{'start_time'}) <=> mins($config{'schedule'}{$b}{'start_time'});
}	
	
# calculate the base values per light, based on config
# that means incuding warmer/brighter/cooler/etc. values, but not the sun and cloudiness
# store in global %ligthts{'schedules'} 
sub calculate_default_schedules() {
	my ($now_dow,$now_year,$now_month,$now_day,$now_hour,$now_minute,$now_second) = (localtime)[6,5,4,3,2,1,0];
	$now_dow = 7 if ($now_dow == 0); # sunday is the LAST day of the week.

	printt("Calculating schedules:\n");
	# initialize a day worth of data for each light in defaults
	foreach my $light (sort keys (%{$config{'lights_defaults'}})) {
		for (my $stamp = 0; $stamp <= 1440; $stamp++) {
			$lights{'schedules'}{$light}{$stamp}{'brightness'} = -1;
			$lights{'schedules'}{$light}{$stamp}{'saturation'} = -1;
			$lights{'schedules'}{$light}{$stamp}{'hue'} = -1;
			$lights{'schedules'}{$light}{$stamp}{'use_suncycle'} = 0;
			$lights{'schedules'}{$light}{$stamp}{'use_weather'}  = 0;
			$lights{'schedules'}{$light}{$stamp}{'reset'} = 0;
		}	
	}	

	# parse the configured schedules
	foreach my $schedule (sort by_start_time keys(%{$config{'schedule'}})) {
		my @days       = split(/\s+/,$config{'schedule'}{$schedule}{'days'});
		if (in($now_dow,\@days)) {
			my @on_lights  = split(/\s+/,$config{'schedule'}{$schedule}{'lights'});
			my $ss = mins($config{'schedule'}{$schedule}{'start_time'});
			my $se = mins($config{'schedule'}{$schedule}{'end_time'});
			my $bri_adjust = 0;
			my $sat_adjust = 0;
			my $hue_adjust = 0;
			my $sun_adjust = 0; 
			my $wth_adjust = 0; 
			 
			if (exists($config{'schedule'}{$schedule}{'brightness'})) {
				if ($config{'schedule'}{$schedule}{'brightness'} eq "brighter") {
					$bri_adjust =  $config{'config'}{'adjust'}{'base'};
				} elsif ($config{'schedule'}{$schedule}{'brightness'} eq "darker") {
					$bri_adjust = -$config{'config'}{'adjust'}{'base'};
				}	
			}	
	
			if (exists($config{'schedule'}{$schedule}{'temperature'})) {
				if ($config{'schedule'}{$schedule}{'temperature'} eq "warmer") {
					$hue_adjust = -$config{'config'}{'adjust'}{'hue'};
					$sat_adjust =  $config{'config'}{'adjust'}{'sat'};
				} elsif ($config{'schedule'}{$schedule}{'temperature'} eq "cooler") {
					$hue_adjust =  $config{'config'}{'adjust'}{'hue'};
					$sat_adjust = -$config{'config'}{'adjust'}{'sat'};
				}	
			}	
			
			if (exists($config{'schedule'}{$schedule}{'use_suncycle'}) and ($config{'schedule'}{$schedule}{'use_suncycle'} eq 'yes')) {
				$sun_adjust = 1;
			}

			if (exists($config{'schedule'}{$schedule}{'use_weather'}) and ($config{'schedule'}{$schedule}{'use_weather'} eq 'yes')) {
				$wth_adjust = 1;
			}

			printt("    $schedule => start $ss ($config{'schedule'}{$schedule}{'start_time'}), end $se ($config{'schedule'}{$schedule}{'end_time'}), bri+/-: $bri_adjust, sat+/-: $sat_adjust, hue+/-: $hue_adjust, sun: $sun_adjust, weather: $wth_adjust\n");
			# normally end is bigger (later) than start
			# if not (-> else) assume it crosses midnight and then it needs to be split up
			if ($se > $ss) {
				foreach my $light (@on_lights) {
					for (my $stamp = $ss; $stamp <= $se; $stamp++) {
						$lights{'schedules'}{$light}{$stamp}{'brightness'}   = $config{'lights_defaults'}{$light}{'brightness'} + $bri_adjust;
						$lights{'schedules'}{$light}{$stamp}{'saturation'}   = $config{'lights_defaults'}{$light}{'saturation'} + $sat_adjust;
						$lights{'schedules'}{$light}{$stamp}{'hue'}          = $config{'lights_defaults'}{$light}{'hue'} + $hue_adjust;
						$lights{'schedules'}{$light}{$stamp}{'use_suncycle'} = $sun_adjust;
						$lights{'schedules'}{$light}{$stamp}{'use_weather'}  = $wth_adjust;
					}	
					# trigger reset at start and end of period
					$lights{'schedules'}{$light}{$ss}{'reset'} = 1;
					$lights{'schedules'}{$light}{$se}{'reset'} = 1;
				}	
			} else {	
				foreach my $light (@on_lights) {
					# pre-midnight
					for (my $stamp = $ss; $stamp <= 1440; $stamp++) {
						$lights{'schedules'}{$light}{$stamp}{'brightness'}   = $config{'lights_defaults'}{$light}{'brightness'} + $bri_adjust;
						$lights{'schedules'}{$light}{$stamp}{'saturation'}   = $config{'lights_defaults'}{$light}{'saturation'} + $sat_adjust;
						$lights{'schedules'}{$light}{$stamp}{'hue'}          = $config{'lights_defaults'}{$light}{'hue'} + $hue_adjust;
						$lights{'schedules'}{$light}{$stamp}{'use_suncycle'} = $sun_adjust;
						$lights{'schedules'}{$light}{$stamp}{'use_weather'}  = $wth_adjust;
					}	
					# post-midnight
					for (my $stamp = 0; $stamp <= $se; $stamp++) {
						$lights{'schedules'}{$light}{$stamp}{'brightness'}   = $config{'lights_defaults'}{$light}{'brightness'} + $bri_adjust;
						$lights{'schedules'}{$light}{$stamp}{'saturation'}   = $config{'lights_defaults'}{$light}{'saturation'} + $sat_adjust;
						$lights{'schedules'}{$light}{$stamp}{'hue'}          = $config{'lights_defaults'}{$light}{'hue'} + $hue_adjust;
						$lights{'schedules'}{$light}{$stamp}{'use_suncycle'} = $sun_adjust;
						$lights{'schedules'}{$light}{$stamp}{'use_weather'}  = $wth_adjust;
					}	
					# trigger reset at start and end of period
					$lights{'schedules'}{$light}{$ss}{'reset'} = 1;
					$lights{'schedules'}{$light}{$se}{'reset'} = 1;
				}
			}	
		}	
	}
	# TODO: do a smoothing pass on the default schedule
	# foreach my $light (sort keys (%{$config{'lights_defaults'}})) {
	# fill in the blanks.
	#}	
}

sub initialize_current_light_values() {
	# store the current values as previous
	printt ("Initializing initial light values\n");
	foreach my $light (sort keys (%{$config{'lights_defaults'}})) {
		my ($cur_rc, $cur_onoff, $cur_bri, $cur_sat, $cur_hue) = light_current($light);
		$lights{'previous'}{$light}{'brightness'} = $cur_bri;
		$lights{'previous'}{$light}{'saturation'} = $cur_sat;
		$lights{'previous'}{$light}{'hue'} = $cur_hue;
		printt (" ... $light -> $cur_onoff -> $cur_bri -> $cur_sat -> $cur_hue\n");
	}	
}

# run_schedule_check; this run_schedule_checks on the timer and does matching and processing
sub run_schedule_check() {
	# get the needed parameters into single variables
	my ($now_dow,$now_year,$now_month,$now_day,$now_hour,$now_minute,$now_second) = (localtime)[6,5,4,3,2,1,0];
	my $stamp   = mins("$now_hour:$now_minute"); 
	# my $state   = stat($state_file);
	$now_dow = 7 if ($now_dow == 0); # sunday is the LAST day of the week.

	foreach my $light (sort keys (%{$config{'lights_defaults'}})) {
		if ($lights{'schedules'}{$light}{$stamp}{'brightness'} > 0) {
			printt ("light: $light ($config{'lights_defaults'}{$light}{'name'})\n");
			my $bri = $lights{'schedules'}{$light}{$stamp}{'brightness'};
			my $sat = $lights{'schedules'}{$light}{$stamp}{'saturation'};
			my $hue = $lights{'schedules'}{$light}{$stamp}{'hue'};
			my $sun = $lights{'schedules'}{$light}{$stamp}{'use_suncycle'};
			my $wth = $lights{'schedules'}{$light}{$stamp}{'use_weather'};
			my $rst = $lights{'schedules'}{$light}{$stamp}{'reset'};
			my $sun_val = 0;
			my $bri_adjust = 0;
			my $sat_adjust = 0;
			my $hue_adjust = 0;
			my $adjust = 0;
		
			# adjust for sun?
			if ($sun == 1) {
				# get the adjustement for sun cycle (%)
				$sun_val = get_suncycle($stamp);
				# recalculate the adjustment, using the returned % and the configured base value value
				$bri_adjust += int($config{'config'}{'adjust'}{'sun'} * ($sun_val / 100));
				# adjust hue/sat to warmer tones during darkness, but only a littlebit
				$hue_adjust += int($config{'config'}{'adjust'}{'hue'} * ($sun_val / 200));
				$sat_adjust += int($config{'config'}{'adjust'}{'sat'} * ($sun_val / 200));
			}	
			
			# adjust for weather?
			if ($wth == 1) {
				# recalculate the adjustment, using the returned % and the configured base value value
				# also adjust for the sun, as the sun_adjust gets higher, the effect of the weather adjustment should get lower
				$bri_adjust += int($config{'config'}{'adjust'}{'clouds'} * ((100 - $sun_val) * $clouds / 10000)); # 2 percentages, hence the divide by 10000
			}	

			printt ("    base       : $bri/$sat/$hue/$sun/$wth/$rst\n");
			# finalize brightness/saturation/hue
			$bri += $bri_adjust;
			$sat += $sat_adjust;
			$hue += $hue_adjust;
			printt ("    adjustments: $bri_adjust/$sat_adjust/$hue_adjust\n");

			# get current values
			my ($cur_rc, $cur_onoff, $cur_bri, $cur_sat, $cur_hue) = light_current($light);
			printt ("    current    : $cur_bri/$cur_sat/$cur_hue\n");

			# reset needed?
			if ($rst) {
				$adjust = 2;

			# verify if this is a first run or not.
			} elsif (not exists($lights{'previous'}{$light}{'brightness'})) {
				$adjust = 1;
			
			# all other cases:
			} else {	
				# if one or more values is not the same as the previous value, it was probably modified, leave it alone
				if (($cur_bri != $lights{'previous'}{$light}{'brightness'}) or
					($cur_sat != $lights{'previous'}{$light}{'saturation'}) or
					($cur_hue != $lights{'previous'}{$light}{'hue'}) or
					($cur_onoff eq 'false')) {
					$adjust = 0;
				
				# if all is the same, no adjustment call is required	
				} elsif (($cur_bri == $lights{'previous'}{$light}{'brightness'}) and
					($cur_sat == $lights{'previous'}{$light}{'saturation'}) and
					($cur_hue == $lights{'previous'}{$light}{'hue'}) and
					($cur_onoff eq 'true')) {
					$adjust = 1;

				# change it.	
				} else {
					$adjust = 2;
				}	
			}

			# make sure these don't go out of range
			minmax(\$bri,0,254);
			minmax(\$sat,0,254);
			minmax(\$hue,0,65535);

			if ($adjust == 2) {
				light_adjust($light,'true',$bri,$sat,$hue);
				printt ("    adjusted to: $bri/$sat/$hue\n");
			} elsif ($adjust == 1) {	
				printt ("    **  remains the same\n");
			} elsif ($adjust == 0) {	
				printt ("    **  was not adjusted (altered externally)\n");
			}	
			# store the current values as previous
			$lights{'previous'}{$light}{'brightness'} = $bri;
			$lights{'previous'}{$light}{'saturation'} = $sat;
			$lights{'previous'}{$light}{'hue'} = $hue;

		} else {
			# turn it off
			light_adjust($light,'false',0,0,0);
		}
	}
}

# RC 1 = ok + current values
# RC 0 = not, data probably incomplete
sub light_current($) {
	my $light      = shift;
	my $brightness = -1;
	my $saturation = -1;
	my $hue        = -1;
	my $onoff;
	my ($curl_returncode, $curl_output) = curl_hue("/lights/$light","GET",'');
	($brightness) = ($curl_output =~ m/"bri":\s*(\d+)\s*/);
	($saturation) = ($curl_output =~ m/"sat":\s*(\d+)\s*/);
	($hue)        = ($curl_output =~ m/"hue":\s*(\d+)\s*/);
	($onoff)      = ($curl_output =~ m/"on":\s*(\w+)\s*/);
	# everything has to be in order:
	if (($curl_returncode == 0) and ($brightness > -1) and ($saturation > -1) and ($hue > -1)) {
		return (1, $onoff, $brightness, $saturation, $hue);
	} else {
		return (0,0,0,0,0);
	}	
}	
	
# RC 1 = ok
# RC 0 = not ok
sub light_adjust($$$$$) {
	my $light      = shift;
	my $onoff      = shift;
	my $brightness = shift;
	my $saturation = shift;
	my $hue        = shift;
	my $curl_data  = "{\"on\":$onoff,\"bri\":$brightness,\"sat\":$saturation,\"hue\":$hue}";

	# setup a conversation to the bridge
	my ($curl_returncode, $curl_output) = curl_hue("/lights/$light/state","PUT",$curl_data);
	# the match on success is a bit flaky still, because 4 properties are set, but only 1 has to succeed
	# to get a match on success. TODO
	if ($curl_returncode == 0 and $curl_output =~ /success/) {
		# printt("  a+ light $light adjusted\n");
		return 1;
	} else {	
		# printt("  a- light $light not adjusted\n");
		return 0;
	}	
}	

# talk to hue
sub curl_hue($$;$) {
	my $api_call  = shift; # everything after userid
	my $curl_meth = shift;
	my $curl_data = shift;
	my $host = $config{'config'}{'hue'}{'hue_host'};
	my $user = $config{'config'}{'hue'}{'hue_user'};
	my $curl_path    = "http://$host/api/${user}${api_call}";
	my $curl_output  = "";
	my $curl_RC      = 1;
	my $curl_command; 
	
	# a PUT of POST needs data with a -d option
	$curl_data    = "-d '" . $curl_data ."'" if ($curl_data); 
	$curl_command = "$curl -s -f -X $curl_meth -H 'Content-Type: application/json' $curl_data $curl_path";
	# printt ("curl    : $curl_command\n");
	
	if ($child_pid = open (CO,"-|","$curl_command")) {
		alarm($timeout);
		while (<CO>) {
			$curl_output .= $_;	
		}
		close(CO);
		$curl_RC = $?;
		alarm(0);
	}
	# printt ("    - curl RC : $curl_RC\n");
	# printt ("  x- curl out: $curl_output\n");
	return ($curl_RC, $curl_output);
}	
	
	
# does something with the sun
sub get_suncycle($) {
	my $stamp  = shift; # now
	my $result = 0;
	$result = $suncycle{$stamp} if ($suncycle{$stamp});
	return $result;
}

# dummy for testing
sub get_cloudiness() {
	my $clouds = 33;
	open(CL,"<clouds") or die ("$? - $!");
	while (<CL>) {
		if ($_ =~ /clouds:\s*(\d+)/) {
			$clouds = $1;
		}	
	}
	close(CL);
	printt("clouds: $clouds\n");			
	return $clouds;
}	
	

# does something with weather, returns clouds value (0-100) 
sub get_cloudiness_real() {
	my $return_value = 50; # default is somewhere in the middle
	my $longitude = $config{'config'}{'location'}{'long'};
	my $latitude  = $config{'config'}{'location'}{'lat'};
	my $open_weather_map_url = "http://api.openweathermap.org/data/2.5/weather?mode=json&units=metric&lat=$latitude&lon=$longitude";
	my $curl_command = "$curl -s -f -X GET -H 'Content-Type: application/json' '$open_weather_map_url'";
	my $curl_output;
	my $curl_returncode;
	my $clouds = 50; # 100 = heavy overcast, 0 = clear sky

	# setup a curl session to openweathermap
	# printt ("curl    : $curl_command\n");
	if ($child_pid = open (CO,"-|","$curl_command")) {
		alarm($timeout);
		while (<CO>) {
			$curl_output .= $_;	
		}
		close(CO);
		$curl_returncode = $?;
		alarm(0);
	}
	if ($curl_returncode == 0) {
		# ok
		$clouds = ($curl_output =~ m/"clouds":{"all":(\d+)}/g);
		$return_value = $clouds;
		printt(" -- clouds   : $clouds\n");			
	} else {
		# curl not ok
		printt(" !! curl to $open_weather_map_url failed\n");
	}	

	return $return_value;
}

# nice and tidy
sub self_clean() {
	# get the needed parameters into single variables
	my $log_file   = $config{'config'}{'logging'}{'hue_log'};
	my $log_size   = $config{'config'}{'logging'}{'hue_log_size'};
	my $state_file = $config{'config'}{'logging'}{'hue_state'};
	my $clean_time = $config{'config'}{'logging'}{'hue_clean_time'};
	my ($now_dow,$now_year,$now_month,$now_day,$now_hour,$now_minute,$now_second) = (localtime)[6,5,4,3,2,1,0];
	my $ts = sprintf ("%04d-%02d-%02d %02d:%02d:%02d - ", $now_year+1900,$now_month+1,$now_day,$now_hour,$now_minute,$now_second);
	# hashed out, because stat throws ugly warnings. Which is not at all something I appreciate from a core module..
	# my @state = stat($state_file);
	my $run_cleanup = 0;

	# determine wether cleanup should run
	# first match size
	# then check if a timed cleanup is required
	# if ($state[7] > $log_size) {
	#	$run_cleanup = 1;
	# } elsif ($clean_time eq "weekly") {
	if ($clean_time eq "weekly") {
		# only run if on monday
		if ($now_dow == 1) {
			$run_cleanup = 1;
		}	
	} elsif ($clean_time eq "daily") {
		# redundant check, but here for completeness
		$run_cleanup = 1;
	}

	# time to run
	if ($run_cleanup) {
		# shift copies
		if (copy("$log_file","$log_file.1")) {
			# empty the logfile, and print 
			if (open (LF, ">$log_file")) {
				print LF "$ts ==>> Self Cleaning occurred.\n";
				print LF "$ts ==>> Running PID: $$\n";
				close LF;
				# update state file to indicate self clean has run
				if (open (SF,">$state_file")) {
					print SF "$ts";
					close SF;
				} else {
					printt("State File NOT updated\n");
				}	
			} else {
				printt ("Log file copy not ok\n");
			}	
		} else {
			printt ("Self Cleaning FAILED\n");
		}	
	}
}

sub kill_child() {
	my $count = 0;
	$count = kill ("TERM", $child_pid);
	if ($count > 0) {
		printt ("command with PID $child_pid, killed due to timeout\n");
	} else {	
		printt ("command with PID $child_pid, failed to be killed\n");
	}	
}


# mail me some stuff
sub mail_info($$) {
        my $title = shift;
        my $message = shift;
        open (PH, "|/usr/sbin/sendmail -t");
	print (PH "To: $config{'config'}{'hue'}{'email'}\n");
	print (PH "From: hue\n");
	print (PH "Subject: $title\n\n");
	print (PH "$message\n\n");
	close(PH);
}

# SIGNAL handlers
sub signal_term {
	printt ("### Caught TERM / INT \n");
      	$i_should_run=0;
	mail_info("hued: ended","PID: $$")
}

sub signal_hup {
	printt ("### Caught HUP - reloading config \n");
	$i_should_reload_config=1;
	$i_caught_a_signal=1;
}

sub signal_usr1 {
	printt ("### Caught USR1 - dumping current config\n");
	$i_should_dump_config=1;
	$i_caught_a_signal=1;
} 

sub signal_usr2 {
	printt ("### Caught USR2 - restart\n");
	$i_should_dump_config=1;
       	$i_should_rerun=1;
}

# loads config, but empties it first
sub load_config() {
	%config = ();
	%lights = ();

	# some needed defaults:
	$config{'config'}{'logging'}{'hue_log'}   = "/var/log/hue/hued.log";
	$config{'config'}{'logging'}{'hue_state'} = "/var/log/hue/hued.state";
  
  	# open the config file (in same dir as daemon - for now)
	open_hue_file("hue.conf");
}	
	
# dump some config variables	
sub dump_config() {
	# or at least part of it.
	print "\nCurrently loaded data:";
	print "\n\n";
	print "output to                : $config{'config'}{'logging'}{'hue_log'}\n";
	print "state                    : $config{'config'}{'logging'}{'hue_state'}\n";
	print "log file size            : $config{'config'}{'logging'}{'hue_log_size'}\n";
	print "clean time               : $config{'config'}{'logging'}{'hue_clean_time'}\n";
	print "hue host                 : $config{'config'}{'hue'}{'hue_host'}\n";
	print "hue user                 : $config{'config'}{'hue'}{'hue_user'}\n";
	print "current pid              : $$\n";
}

# output redirection
sub set_STDOUT($) {
	my $outfile = shift;
	open(FOUT, ">>$outfile") || die "\nCouldn't open logfile\n";
	*STDOUT = *FOUT;	
}

sub set_STDERR($) {
	my $outfile = shift;
	open(FERR, ">>$outfile") || die "\nCouldn't open logfile\n";
        *STDERR = *FERR;
}

# print with a timestamp
sub printt($) {
	my $message=shift;
	my ($year,$month,$day,$hour,$minute,$second) = (localtime)[5,4,3,2,1,0];
	printf ("%04d-%02d-%02d %02d:%02d:%02d - ",$year+1900,$month+1,$day,$hour,$minute,$second);
	print $message;
}

#--------------------------
# main
#--------------------------

# unbuffer output
$| = 1;

load_config();

# daemonize?
if ($config{'config'}{'hue'}{'daemon'} eq 'yes') {
	# daemonize this! (from the Perl Cookbook)
	# fork
	$pid = fork;
	# exit parent
	exit if $pid;
	# check
	die "Couldn't fork $!\n" unless defined($pid);
	# diassociate from controlling terminal..
	POSIX:setsid() or die "Can't start a new session $!\n";
	printt ("hued started - DAEMON MODE - PID: $$\n");
	set_STDERR($config{'config'}{'logging'}{'hue_log'});
	set_STDOUT($config{'config'}{'logging'}{'hue_log'});
} else {	
	printt ("hued started - CONSOLE MODE - PID: $$\n");
}	
# end of daemonisation

# catch signals
$SIG{INT} = $SIG{TERM} = \&signal_term;
$SIG{HUP} = \&signal_hup;
$SIG{USR1} = \&signal_usr1;
$SIG{USR2} = \&signal_usr2;
$SIG{ALRM} = \&kill_child;


calculate_suncycle(\%suncycle);
calculate_default_schedules();
# initialize_current_light_values();
$clouds = get_cloudiness();

$i_should_run=1;
$i_should_rerun=0;
$i_should_dump_config=0;
$i_should_reload_config=0;
$i_caught_a_signal=0;

while ($i_should_run) {
	# wait 10 seconds -> run_schedule_check every 10 seconds.
	# this implies that an extra check is required to prevent
	# running multiple times during the same minute.
	select (undef,undef,undef,10);

	# what is now?
	my ($now_dow,$now_year,$now_month,$now_day,$now_hour,$now_minute,$now_second) = (localtime)[6,5,4,3,2,1,0];

	# run_schedule_check every minute, but only once a minute
	# that means only trigger when the minute has changed
	if ($now_minute != $last_minute) {
		# update clouds value
		$clouds = get_cloudiness();
		run_schedule_check();

		# at 0:00 in the morning, do selfcleaning, and calculate the suncycle and schedules for the day
		if (($now_hour == 0) and ($now_minute == 0)) {
			self_clean();
			calculate_suncycle(\%suncycle);
			calculate_default_schedules();
		}	
		$last_minute = $now_minute;
	}	

	# now handle all other stuff that needs to be taken care of
	if ($i_should_dump_config) {
		dump_config();
	}
	if ($i_should_reload_config) {
		load_config();
		calculate_suncycle(\%suncycle);
		calculate_default_schedules();
		# initialize_current_light_values();
	}
	
	$i_should_dump_config=0;
	$i_should_reload_config=0;
	$i_caught_a_signal=0;

	if ($i_should_rerun) {
		close(PH);
		my $newpid = fork();
		printt ("FORKED: $$ -> $newpid\n");
		$i_should_run=1;
		$i_should_rerun=0;
		exit if ($newpid);
	}	
}


printt ("hued ended succesfully, PID: $$\n");
exit 0;


# bye now
