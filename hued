#!/usr/bin/perl -w 

# hued, 2014
# a daemon to control a bunch of philips hue lights throughout the day
# License: not decided yet, for now: no commecial use, only use it privately and include the original github location:
# https://github.com/oxoob/hue

# TODO: make randomization of start/end times possible 
# TODO: make the push messages more descriptive (start + end values)
# TODO: smooth cloudiness adjustments

# NOTE: the check if DB actions are wanted is done inside the functions that interact with the DB
#       this is to avoid cluttering when calling the functions, at the expense of actually calling
#       the functions.

# use clauses
use strict;
use POSIX;
use File::stat;
use File::Copy;
use Math::Round;
use DateTime;
use Astro::Sunrise;
use DBI;
use Data::Dumper;
# a numeric sort (can cause loads of warnings if values are non-numeric:
$Data::Dumper::Sortkeys = sub {[sort {$a <=> $b} keys %{$_[0]}]};
# just a sort:
# $Data::Dumper::Sortkeys = 1;

# global variables
my %config;
my %lights;
my %suncycle;
my %tsv;
my $hue;
my $clouds; # global var for storing cloudiness (so it does not have to be checked all the time)
my $dbh; # global database handler

# daemon control variables
my $i_should_run;
my $i_should_reload_config;
my $i_caught_a_signal;
my $override = 1; # when the daemon starts, make the daemon set the lights, no matter what
my $last_minute = 99; # initialize to an impossible value 
my $pid;
my $child_pid;
my $timeout = 20;

# external commands
my $curl = "/usr/bin/curl"; 

# some needed defaults:
$config{'config'}{'logging'}{'hue_log'}    = "/var/log/hue/hued.log";
$config{'config'}{'logging'}{'hue_state'}  = "/var/log/hue/hued.state";

# read the config file  
sub open_hue_file($) {
        my $f_hue = shift;
        my $fh_hue;
        my $line;
	my $key_A;
	my $key_B;
	printt ("Opening hue file \"$f_hue\", and loading data...\n");
        if (open($fh_hue, "<$f_hue")) {
        	while ($line = readline($fh_hue)) {
			chomp($line);
			$line =~ s/\s*#.*//; # remove comments
			if ($line =~ /^\[(\S+)\]\s*$/) {
				$key_A = $1;
			}	
			if ($line =~ /^\s*(\S+):\s*$/) {
				$key_B = $1;
			}	
			if ($line =~ /^\s*(\S+)\s*=\s*(.*)\s*$/) {
				my $val = $2;
				if ($val eq 'sunrise') {
					my $length  = int(150 * sin(3.1415 * $config{'config'}{'location'}{'lat'} / 180));
					$val = snim(mins(sun_rise($config{'config'}{'location'}{'long'},$config{'config'}{'location'}{'lat'})) + ($length/4)*3);
				}
				if ($val eq 'sunset') {
					my $length  = int(150 * sin(3.1415 * $config{'config'}{'location'}{'lat'} / 180));
					$val = snim(mins(sun_set($config{'config'}{'location'}{'long'},$config{'config'}{'location'}{'lat'})) - ($length/4)*3);
				}
				$config{$key_A}{$key_B}{$1} = $val;
				$config{$key_A}{$key_B}{$1} =~ s/\s+$//g; # strip whitespace at the end
				# print ("Added to config : $key_A - $key_B -> $1 => $2\n");
			}
		}
        	close $fh_hue;
        } else {
		printt ("No config file found, running empty\n");
	}	
}

# NOTE: all DB fcuntions operate on global dbh
# RC1 = ok, RC0 = not
sub connect_database() {
	# bail out if DB is not to be used, no error
	if ($config{'config'}{'db'}{'use'} eq "no") {
		printt ("DB not used\n");
		return 1;
	}	
	if ($dbh = DBI->connect("dbi:mysql:$config{'config'}{'db'}{'db'}",$config{'config'}{'db'}{'user'},$config{'config'}{'db'}{'pwd'})) {
		printt ("DB $config{'config'}{'db'}{'db'} connected\n");
		return 1;
	} else {
		printt ("DB $config{'config'}{'db'}{'db'} NOT connected\n");
		printt ("DB errstr: $DBI::errstr\n");
		return 0;
	}
}	

# RC1 = ok, RC0 = not ok
sub log_to_database($$$) {
	# bail out if DB is not to be used, no error
	if ($config{'config'}{'db'}{'use'} eq "no") {
		return 1;
	}	
	my $table = shift; # lights, sun, weather
	my $time  = shift; # 09:34:12
	my $data  = shift; # a hash containing field, value pairs
	my $query;
	my $result = 1;
	
	# create a SET statement, can also be used for UPDATE clause
	my $set = "";
	foreach my $key (sort keys(%{$data})) {
		$set .= "`$key`='$$data{$key}',";
	}
	# remove trailing comma
	$set =~ s/,$//g;
	$query = "INSERT INTO $table SET `time`='$time',$set ON DUPLICATE KEY UPDATE $set";

	# update db
	if (my $sth = $dbh->prepare($query)) {
		if (not $sth->execute) {
			printt ("DB execute: $DBI::errstr\n");
			$result = 0;
		}
	} else {
		printt ("DB prepare: $DBI::errstr\n");
		$result = 0;
	}	
	return $result;
}

# operates on global dbh
# RC1 = ok, RC0 = not ok
sub log_query_to_database($) {
	# bail out if DB is not to be used, no error
	if ($config{'config'}{'db'}{'use'} eq "no") {
		return 1;
	}	
	my $query = shift; # 
	my $result = 1;
	
	# update db
	if (my $sth = $dbh->prepare($query)) {
		if (not $sth->execute) {
			printt ("DB execute: $DBI::errstr\n");
			printt ("$query\n");
			$result = 0;
		}
	} else {
		printt ("DB prepare: $DBI::errstr\n");
		printt ("$query\n");
		$result = 0;
	}	
	return $result;
}

sub truncate_table($) {
	# bail out if DB is not to be used, no error
	if ($config{'config'}{'db'}{'use'} eq "no") {
		return 1;
	}	

	my $table = shift;
	my $query = "TRUNCATE TABLE `$table`";
	my $result = 1;

	# update db
	if (my $sth = $dbh->prepare($query)) {
		if (not $sth->execute) {
			printt ("DB execute: $DBI::errstr\n");
			$result = 0;
		}
	} else {
		printt ("DB prepare: $DBI::errstr\n");
		$result = 0;
	}	
	return $result;
}

# search a value in an array, both numerical as alfa
sub in($$) {
	my $search  = shift;
	my $arr_ref = shift;
	foreach (@$arr_ref) {
		return 1 if ($search eq $_);
		return 1 if ($search == $_);
	}
	return 0;
}	

# convert HH:MM to minutes; :SS is ignored, which means it's rounded to the minute
sub mins($) {
	my $hhmm = shift;
	my ($hh,$mm,$ss) = split (":", $hhmm);
	return ($hh * 60) + $mm;
}	

# convert minutes to HH:MM:SS
sub snim($) {
	my $mins = shift;
	my $hh = int($mins/60);
	my $mm = int($mins % 60);
	return sprintf ("%02d:%02d:00",$hh,$mm);
}	

# minmax, prevent a value for exceeding the given minimum or maximum
sub minmax($$$) {
	my $val_ref = shift;
	my $min = shift;
	my $max = shift;
	$$val_ref = $min if ($$val_ref < $min);
	$$val_ref = $max if ($$val_ref > $max);
}	

# determine if the supplied value is psositiv or negative, returns -1 or 1
# for integer values this should work fine.
sub posneg($) {
	my $value = shift;
	# prevent div by 0
	if ($value != 0) {
		return ($value / abs($value));
	} else {
		return 1; # 
	}	
}	

# sorting function to sort schedules by start_time
sub by_start_time {
	mins($config{'schedule'}{$a}{'start_time'}) <=> mins($config{'schedule'}{$b}{'start_time'});
}	
	
# a very! basic function to attempt to emulate dawn and dusk's increase and decrease in light
# expressed in a value from 0 to 100 (a percentage), 0 is light, 100 is dark. same as cloudiness
sub calculate_suncycle($) {
	my $suncycle_ref = shift;
	my $time;
	my $stime;
	my $rise    = sun_rise($config{'config'}{'location'}{'long'},$config{'config'}{'location'}{'lat'});
	my $sunrise = int(mins($rise));
	my $set     = sun_set($config{'config'}{'location'}{'long'},$config{'config'}{'location'}{'lat'});
	my $sunset  = int(mins($set));
	# just a ballpark attempt at guessing the length of dusk or dawn in minutes (related to latitude)
	my $length  = int(150 * sin(3.1415 * $config{'config'}{'location'}{'lat'} / 180));
	printt ("Calculating suncycle. Sunrise: $sunrise ($rise) Sunset: $sunset ($set) - transition length: $length\n");

	# night
	printt ("Night:\n");
	for (my $minute = 0; $minute < int($sunrise - $length/4); $minute++) {
		$$suncycle_ref{$minute} = 100;
		print "$$suncycle_ref{$minute} ";
	}
	print "\n";
	# sunrise
	printt ("Sunrise:\n");
	for (my $minute = int($sunrise - $length/4); $minute < int($sunrise + $length/4 * 3); $minute++) {
		my $val = int (50 + 50 * cos(($minute - ($sunrise - $length/4))/$length * 3.1415)); 
		$$suncycle_ref{$minute} = $val;
		print "$$suncycle_ref{$minute} ";
	}	
	print "\n";
	# day
	printt ("Day:\n");
	for (my $minute = int($sunrise + $length/4 * 3); $minute < int($sunset - $length/4 * 3); $minute++) {
		$$suncycle_ref{$minute} = 0;
		print "$$suncycle_ref{$minute} ";
	}
	print "\n";
	# sunset
	printt ("Sunset:\n");
	for (my $minute = int($sunset - $length/4 * 3); $minute < int($sunset + $length/4); $minute++) {
		my $val = int (50 - 50 * cos(($minute - ($sunset - $length/4 * 3))/$length * 3.1415)); 
		$$suncycle_ref{$minute} = $val;
		print "$$suncycle_ref{$minute} ";
	}	
	print "\n";
	# night
	printt ("Night:\n");
	for (my $minute = int($sunset + $length/4); $minute <= 1440; $minute++) {
		$$suncycle_ref{$minute} = 100;
		print "$$suncycle_ref{$minute} ";
	}
	print "\n";
	printt ("Done\n");

	# update the database, clean it first
	truncate_table('sun');
	my $query = "INSERT INTO `sun` (time,percentage) VALUES";
	for (my $minute = 0; $minute <= 1440; $minute++) {
		$time = snim($minute);
		$stime = substr($time,0,5);
		$tsv{"$stime"} = "$$suncycle_ref{$minute}	";
		$query .= "('$time','$$suncycle_ref{$minute}'),";
	}		
	$query =~ s/,$//g;
	log_query_to_database($query);
}

# calculate the base values per light, based on config
# that means incuding warmer/brighter/cooler/etc. values, but not the sun and cloudiness
# store in global %ligthts{'schedules'} 
sub calculate_default_schedules() {
	%lights = ();
	my ($now_dow,$now_year,$now_month,$now_day,$now_hour,$now_minute,$now_second) = (localtime)[6,5,4,3,2,1,0];
	my $time;
	my $stime;
	my $query; 
	my $query_a;

	$now_dow = 7 if ($now_dow == 0); # sunday is the LAST day of the week.
	printt ("Calculating schedules:\n");
	# initialize a day worth of data for each light in defaults
	foreach my $light (sort keys (%{$config{'lights_defaults'}})) {
		for (my $stamp = 0; $stamp <= 1440; $stamp++) {
			$lights{'schedules'}{$light}{$stamp}{'brightness'}   = 0;
			$lights{'schedules'}{$light}{$stamp}{'brightnessx'}  = 0;
			$lights{'schedules'}{$light}{$stamp}{'saturation'}   = $config{'lights_defaults'}{$light}{'saturation'};
			$lights{'schedules'}{$light}{$stamp}{'hue'}          = $config{'lights_defaults'}{$light}{'hue'};
			$lights{'schedules'}{$light}{$stamp}{'on'}           = 0;
		}	
	}	

	# parse the configured schedules
	foreach my $schedule (sort by_start_time keys(%{$config{'schedule'}})) {
		my @days       = split(/\s+/,$config{'schedule'}{$schedule}{'days'});
		my @on_lights  = split(/\s+/,$config{'schedule'}{$schedule}{'lights'});
		my $ss = mins($config{'schedule'}{$schedule}{'start_time'});
		my $se = mins($config{'schedule'}{$schedule}{'end_time'});
		printt (" $schedule => start : $ss ($config{'schedule'}{$schedule}{'start_time'}), end: $se ($config{'schedule'}{$schedule}{'end_time'})\n");
		printt (" $schedule => days  : '" . join(",", @days) . "'\n");
		
		# verify if today is found the the days configured for this schedule
		if (in($now_dow,\@days)) {
			printt (" $schedule =>       day $now_dow matched - calculating..\n");
			my $bri_adjust = 0;
			my $sat_adjust = 0;
			my $hue_adjust = 0;
			my $sun_adjust = 0;
			
			# get a configured brightness adjustment from the config
			if (exists($config{'schedule'}{$schedule}{'brightness'})) {
				$bri_adjust = $config{'schedule'}{$schedule}{'brightness'};
			}	
	
			# do the same for the temp
			if (exists($config{'schedule'}{$schedule}{'temperature'})) {
				if ($config{'schedule'}{$schedule}{'temperature'} eq "warmer") {
					$hue_adjust = -$config{'config'}{'adjust'}{'hue'};
					$sat_adjust =  $config{'config'}{'adjust'}{'sat'};
				} elsif ($config{'schedule'}{$schedule}{'temperature'} eq "cooler") {
					$hue_adjust =  $config{'config'}{'adjust'}{'hue'};
					$sat_adjust = -$config{'config'}{'adjust'}{'sat'};
				}	
			}	
			
			if (exists($config{'schedule'}{$schedule}{'use_suncycle'}) and ($config{'schedule'}{$schedule}{'use_suncycle'} eq 'yes')) {
				$sun_adjust = 1;
			}

			# normally end is bigger (later) than start
			# if not (-> else) assume it crosses midnight and then it needs to be split up
			if ($se > $ss) {
				foreach my $light (@on_lights) {
					for (my $stamp = $ss; $stamp <= $se; $stamp++) {
						my $sun_add = 0;
						my $on = 1;
						if ($sun_adjust) {
							# get the adjustement for sun cycle (%)
							my $sun_val = get_suncycle($stamp);
							# recalculate the adjustment, using the returned % and the configured base value value
							if (defined($config{'schedule'}{$schedule}{'sunfluence'})) {
								$sun_add = int($config{'schedule'}{$schedule}{'sunfluence'} * ($sun_val / 100));
							} else {
								$sun_add = int($config{'config'}{'adjust'}{'sun'} * ($sun_val / 100));
							}	
							$on = 4 if (($sun_val > 0) and ($sun_val < 100));
						}	
						$lights{'schedules'}{$light}{$stamp}{'brightness'}   = $config{'lights_defaults'}{$light}{'brightness'} + $bri_adjust + $sun_add;
						$lights{'schedules'}{$light}{$stamp}{'brightnessx'}  = $config{'lights_defaults'}{$light}{'brightness'} + $bri_adjust;
						$lights{'schedules'}{$light}{$stamp}{'saturation'}   = $config{'lights_defaults'}{$light}{'saturation'} + $sat_adjust;
						$lights{'schedules'}{$light}{$stamp}{'hue'}          = $config{'lights_defaults'}{$light}{'hue'} + $hue_adjust;
						$lights{'schedules'}{$light}{$stamp}{'on'} = $on;
					}	
				}	
			} else {	
				foreach my $light (@on_lights) {
					# pre-midnight
					for (my $stamp = $ss; $stamp <= 1440; $stamp++) {
						my $sun_add = 0;
						my $on = 1;
						if ($sun_adjust) {
							# get the adjustement for sun cycle (%)
							my $sun_val = get_suncycle($stamp);
							# recalculate the adjustment, using the returned % and the configured base value value
							if (defined($config{'schedule'}{$schedule}{'sunfluence'})) {
								$sun_add = int($config{'schedule'}{$schedule}{'sunfluence'} * ($sun_val / 100));
							} else {
								$sun_add = int($config{'config'}{'adjust'}{'sun'} * ($sun_val / 100));
							}	
							$on = 4 if (($sun_val > 0) and ($sun_val < 100));
						}	
						$lights{'schedules'}{$light}{$stamp}{'brightness'}   = $config{'lights_defaults'}{$light}{'brightness'} + $bri_adjust + $sun_add;
						$lights{'schedules'}{$light}{$stamp}{'brightnessx'}  = $config{'lights_defaults'}{$light}{'brightness'} + $bri_adjust;
						$lights{'schedules'}{$light}{$stamp}{'saturation'}   = $config{'lights_defaults'}{$light}{'saturation'} + $sat_adjust;
						$lights{'schedules'}{$light}{$stamp}{'hue'}          = $config{'lights_defaults'}{$light}{'hue'} + $hue_adjust;
						$lights{'schedules'}{$light}{$stamp}{'on'} = $on;
					}	
					# post-midnight
					for (my $stamp = 0; $stamp <= $se; $stamp++) {
						my $sun_add = 0;
						my $on = 1;
						if ($sun_adjust) {
							# get the adjustement for sun cycle (%)
							my $sun_val = get_suncycle($stamp);
							# recalculate the adjustment, using the returned % and the configured base value value
							if (defined($config{'schedule'}{$schedule}{'sunfluence'})) {
								$sun_add = int($config{'schedule'}{$schedule}{'sunfluence'} * ($sun_val / 100));
							} else {
								$sun_add = int($config{'config'}{'adjust'}{'sun'} * ($sun_val / 100));
							}	
							$on = 4 if (($sun_val > 0) and ($sun_val < 100));
						}	
						$lights{'schedules'}{$light}{$stamp}{'brightness'}   = $config{'lights_defaults'}{$light}{'brightness'} + $bri_adjust + $sun_add;
						$lights{'schedules'}{$light}{$stamp}{'brightnessx'}  = $config{'lights_defaults'}{$light}{'brightness'} + $bri_adjust;
						$lights{'schedules'}{$light}{$stamp}{'saturation'}   = $config{'lights_defaults'}{$light}{'saturation'} + $sat_adjust;
						$lights{'schedules'}{$light}{$stamp}{'hue'}          = $config{'lights_defaults'}{$light}{'hue'} + $hue_adjust;
						$lights{'schedules'}{$light}{$stamp}{'on'} = $on;
					}	
				}
			}	
		}	
	}

	# dump schedules to database, cleanup first
	truncate_table('lights_scheduled');
	truncate_table('lights_adjusted');

        $query   = "INSERT INTO `lights_scheduled` (primary_key,time,light,scheduled_bri,scheduled_sat,scheduled_hue) VALUES";
        $query_a = "INSERT INTO `lights_adjusted` (primary_key,time,light,adjusted_bri,adjusted_sat,adjusted_hue) VALUES";
	foreach my $light (sort keys (%{$config{'lights_defaults'}})) {
		for (my $stamp = 0; $stamp <= 1440; $stamp++) {
			$time = snim($stamp);
			$query   .= "('$time $light','$time','$light','$lights{'schedules'}{$light}{$stamp}{'brightnessx'}',
					'$lights{'schedules'}{$light}{$stamp}{'saturation'}','$lights{'schedules'}{$light}{$stamp}{'hue'}'),";
			$query_a .= "('$time $light','$time','$light','$lights{'schedules'}{$light}{$stamp}{'brightness'}',
					'$lights{'schedules'}{$light}{$stamp}{'saturation'}','$lights{'schedules'}{$light}{$stamp}{'hue'}'),";
		}
	}	
	$query =~ s/,$//g;
	log_query_to_database($query);
	$query_a =~ s/,$//g;
	log_query_to_database($query_a);
	for (my $stamp = 0; $stamp <= 1440; $stamp++) {
		foreach my $light (sort keys (%{$config{'lights_defaults'}})) {
			$time = snim($stamp);
			$stime = substr($time,0,5);
			$tsv{"$stime"} .= "$lights{'schedules'}{$light}{$stamp}{'brightnessx'}	";
		}
		foreach my $light (sort keys (%{$config{'lights_defaults'}})) {
			$time = snim($stamp);
			$stime = substr($time,0,5);
			$tsv{"$stime"} .= "$lights{'schedules'}{$light}{$stamp}{'brightness'}	";
		}
	}	
}

# do the smoothing
sub smooth_default_schedules() {
	my $smoothing_time = $config{'config'}{'adjust'}{'smoothing_time'};
	my ($now_dow,$now_year,$now_month,$now_day,$now_hour,$now_minute,$now_second) = (localtime)[6,5,4,3,2,1,0];
	my $date = sprintf("%04d-%02d-%02d",$now_year + 1900, $now_month + 1, $now_day);
	my $time;
	my $stime;
	my $query;

	# NOTE: if a period f.i. ends at 23:50 and you set a smoothing time of 15 minutes; the last 5 minutes are not smoothed.

	# cleanup the appropriate table.
	truncate_table('lights_smoothed');

	printt ("Smoothing schedules:\n");
	foreach my $light (sort keys (%{$config{'lights_defaults'}})) {
		# process a whole day
		printt("Smoothing light $light\n");
        	$query   = "INSERT INTO `lights_smoothed` (primary_key,time,light,smoothed_bri,smoothed_sat,smoothed_hue) VALUES ";
		foreach my $stamp (0..1440) {
			# get a weighted (using a cosine curve) average for the current $stamp
			my $bri_value    = 0;
			my $bri_result   = 0;
			my $sat_value    = 0;
			my $sat_result   = 0;
			my $hue_value    = 0;
			my $hue_result   = 0;
			my $weight_total = 0;
			for (my $index = -int($smoothing_time/2); $index <= int($smoothing_time/2); $index++ ) {
				my $weight = cos($index * 3.1415 / $smoothing_time);
				$weight_total += $weight;
				my $stamp_index = $stamp + $index;
				minmax(\$stamp_index,0,1440);
				$bri_value += $lights{'schedules'}{$light}{$stamp_index}{'brightness'} * $weight;
				$sat_value += $lights{'schedules'}{$light}{$stamp_index}{'saturation'} * $weight;
				$hue_value += $lights{'schedules'}{$light}{$stamp_index}{'hue'} * $weight;
			}
			$bri_result = round($bri_value/$weight_total);
			$sat_result = round($sat_value/$weight_total);
			$hue_result = round($hue_value/$weight_total);
				
			$lights{'schedules'}{$light}{$stamp}{'bri_smooth'} = $bri_result;
			$lights{'schedules'}{$light}{$stamp}{'sat_smooth'} = $sat_result;
			$lights{'schedules'}{$light}{$stamp}{'hue_smooth'} = $hue_result;
			# if the average is not the same as the current value, we're smoothing
			# but: keep the reset (on = 2) in tact to make the daemon take control every new period
			if (($bri_result != $lights{'schedules'}{$light}{$stamp}{'brightness'}) or
			    ($sat_result != $lights{'schedules'}{$light}{$stamp}{'saturation'}) or
			    ($hue_result != $lights{'schedules'}{$light}{$stamp}{'hue'})) {
				$lights{'schedules'}{$light}{$stamp}{'on'} = 3;
				$lights{'schedules'}{$light}{$stamp+1}{'on'} = 3; # also work ahead one, to properly complete the smoothing.
			}	
			$time = snim($stamp);
			$query   .= "('$time $light','$time','$light','$bri_result','$sat_result','$hue_result'),";
		}
		$query =~ s/,$//g;
		log_query_to_database($query);
		# after smooting, trigger a reset in the step prior to the smoothing, $start is the timestamp that will be the reset moment
		my $count = 0;
		my $start;
		foreach my $stamp (0..1440) {
			# a first found smooth, set the start and start increasing the counter
			if ($lights{'schedules'}{$light}{$stamp}{'on'} == 3) { 
				if ($count == 0) {
					$start = $stamp - 1;
				}	
				$count++;
			}
			# consider a smoothing streak if more than 4 steps in a row are smoothed
			# but only if a step does not have smoothing and suncycle adjustment set
			if (($count > 4) and ($lights{'schedules'}{$light}{$stamp}{'on'} != 3) and ($lights{'schedules'}{$light}{$stamp}{'on'} != 4)) {
				# set the reset state an reset the counter
				$lights{'schedules'}{$light}{$start}{'on'} = 2;
				$count = 0;
			}
			# oh and while we're at it:
			delete($lights{'schedules'}{$light}{$stamp}{'brightness'});
			delete($lights{'schedules'}{$light}{$stamp}{'brightnessx'});
			delete($lights{'schedules'}{$light}{$stamp}{'saturation'});
			delete($lights{'schedules'}{$light}{$stamp}{'hue'});
		}	
	}	
	printt ("Smoothing done\n");
	for (my $stamp = 0; $stamp <= 1440; $stamp++) {
		foreach my $light (sort keys (%{$config{'lights_defaults'}})) {
			$time = snim($stamp);
			$stime = substr($time,0,5);
			$tsv{"$stime"} .= "$lights{'schedules'}{$light}{$stamp}{'bri_smooth'}	";
		}
	}	
}

sub update_tsv_files() {
	if (open (TSV,">$config{'config'}{'tsv'}{'location'}lights.tsv")) {
		printt("Dumping TSV file ($config{'config'}{'tsv'}{'location'}lights.tsv)\n");
		print TSV "time	sun	light1_schedule	light2_schedule	light3_schedule	light1_adjusted	light2_adjusted	light3_adjusted	";
		print TSV "light1_smoothed	light2_smoothed	light3_smoothed\n";

		foreach my $time (sort keys(%tsv)) {
			print TSV "$time	" . $tsv{$time} . "\n";
		}
		close (TSV);
	} else {
		printt("Failed to dump TSV file ($config{'config'}{'tsv'}{'location'}lights.tsv)\n");
	}
}

# run_schedule_check; this run_schedule_checks on the timer and does matching and processing
sub run_schedule_check() {
	# get the needed parameters into single variables
	my ($now_dow,$now_year,$now_month,$now_day,$now_hour,$now_minute,$now_second) = (localtime)[6,5,4,3,2,1,0];
	my $stamp    = mins("$now_hour:$now_minute"); 
	my $db_stamp = sprintf("%04d-%02d-%02d %02d:%02d:00",$now_year + 1900, $now_month + 1, $now_day, $now_hour, $now_minute);
	$now_dow = 7 if ($now_dow == 0); # sunday is the LAST day of the week.

	foreach my $light (sort keys (%{$config{'lights_defaults'}})) {
		my $name = $config{'lights_defaults'}{$light}{'name'};
		my $on  = $lights{'schedules'}{$light}{$stamp}{'on'};
		# get the smoothed values
		my $bri = $lights{'schedules'}{$light}{$stamp}{'bri_smooth'};
		my $sat = $lights{'schedules'}{$light}{$stamp}{'sat_smooth'};
		my $hue = $lights{'schedules'}{$light}{$stamp}{'hue_smooth'};
		my $wth = $config{'lights_defaults'}{$light}{'use_weather'};
		my $bri_adjust = 0;

		# if the settings of the light have changed since our last pass, it has been adjusted externally and it should be left alone
		# note that the pre* values are the calculated values, this is to ensure that the light be left alone;
		# if the the pre* values were set to the currently set values, it would not register as modified anymore after 1 pass.
		my $pre_bri = $lights{'previous'}{$light}{'brightness'} || 0;
		my $pre_sat = $lights{'previous'}{$light}{'saturation'} || 0;
		my $pre_hue = $lights{'previous'}{$light}{'hue'} || 0;
		my $pre_onf = $lights{'previous'}{$light}{'on'};
		my ($ok, $cur_onf, $cur_bri, $cur_sat, $cur_hue) = light_current($light);
		if (($on != 2 and not $override) and ($ok and (($cur_bri != $pre_bri) or ($cur_sat != $pre_sat) or ($cur_hue != $pre_hue) or ($cur_onf != $pre_onf)))) {
			# tweaking the system
			$on = 5;
		}	

		# $on -> 0 = off
		#     -> 1 = on
		#     -> 2 = reset
		#     -> 3 = smooth
		#     -> 4 = sun adjust
		#     -> 5 = leave alone
		# printt (" $light ($name)\n");
		if ($on) {
			# adjust for weather?
			if ($wth eq "yes") {
				# recalculate the adjustment, using the returned % and the configured base value value
				# also adjust for the sun, as the sun_adjust gets higher, the effect of the weather adjustment should get lower
				my $sun_val = get_suncycle($stamp);
				$bri_adjust += int($config{'config'}{'adjust'}{'clouds'} * ((100 - $sun_val) * $clouds / 10000)); # 2 percentages, hence the division by 10000
			}	

			# finalize brightness/saturation/hue
			$bri += $bri_adjust;
			# make sure these don't go out of range
			minmax(\$bri,0,254);
			minmax(\$sat,0,254);
			minmax(\$hue,0,65535);

			# possible states and the expected result, in order of precedence
			# - override (on restart/reset of hued) -> always change
			# - when externally adjusted            -> no change
			# - reset (on starts of new periods)    -> always change
			# - suncycle                            -> change
			# - smoothing                           -> change
			# - in other cases                      -> no change
			# for logging purposes the adjust value is also used to reflect what kind of action was taken, 

			# TODO: consider taking out the forced reset when a new period starts, and move it to the config
			# TODO: for instance, make a setting to force at the beginning or the end of a period or not at all.

			# reset or override needed? - separated these choices
			if ($override) {
				light_adjust($light,'true',$bri,$sat,$hue);
				printt ("LIGHT$light ($name) overridden to $bri/$sat/$hue\n");
			} elsif ($on == 2) {
				light_adjust($light,'true',$bri,$sat,$hue);
				printt ("LIGHT$light ($name) reset to $bri/$sat/$hue\n");
				pushover("Hued: $name light updated","From: $cur_bri $cur_sat $cur_hue on:$cur_onf\nTo: $bri $sat $hue on:true","0");
			# are we in sun cycle adjustments?
			} elsif ($on == 5) {
				# do nothing to the light
			} elsif ($on == 4) {
				light_adjust($light,'true',$bri,$sat,$hue);
				printt ("LIGHT$light ($name) suncycle adjustment to $bri/$sat/$hue\n");
			# are we smoothing?
			} elsif ($on == 3) {
				light_adjust($light,'true',$bri,$sat,$hue);
				printt ("LIGHT$light ($name) smoothing to $bri/$sat/$hue\n");
			}	
		} else {
			# if the light was previously on, turn it off
			if (exists($lights{'previous'}{$light}{'on'}) and ($lights{'previous'}{$light}{'on'} > 0)) {	
				light_adjust($light,'false',0,0,0);
				printt ("LIGHT$light ($name) turned off\n");
			}	
		}
		# store the current values as previous
		$lights{'previous'}{$light}{'brightness'} = $bri;
		$lights{'previous'}{$light}{'saturation'} = $sat;
		$lights{'previous'}{$light}{'hue'}        = $hue;
		$lights{'previous'}{$light}{'on'}         = $on;
	}
}

# RC 1 = ok + current values
# RC 0 = not, data probably incomplete
sub light_current($) {
	my $light      = shift;
	my $brightness = -1;
	my $saturation = -1;
	my $hue        = -1;
	my $onoff;
	my ($curl_returncode, $curl_output) = curl_hue("/lights/$light","GET",'');
	($brightness) = ($curl_output =~ m/"bri":\s*(\d+)\s*/);
	($saturation) = ($curl_output =~ m/"sat":\s*(\d+)\s*/);
	($hue)        = ($curl_output =~ m/"hue":\s*(\d+)\s*/);
	($onoff)      = ($curl_output =~ m/"on":\s*(\w+)\s*/);
	# rude conversion
	$onoff = 1 if ($onoff eq 'true');
	$onoff = 0 if ($onoff eq 'false');
	# everything has to be in order:
	if (($curl_returncode == 0) and ($brightness > -1) and ($saturation > -1) and ($hue > -1)) {
		return (1, $onoff, $brightness, $saturation, $hue);
	} else {
		return (0,0,0,0,0);
	}	
}	
	
# RC1 = ok, RC0 = not ok
sub light_adjust($$$$$) {
	my $light      = shift;
	my $onoff      = shift;
	my $brightness = shift;
	my $saturation = shift;
	my $hue        = shift;
	my $curl_data  = "{\"on\":$onoff,\"bri\":$brightness,\"sat\":$saturation,\"hue\":$hue}";

	# setup a conversation to the bridge
	my ($curl_returncode, $curl_output) = curl_hue("/lights/$light/state","PUT",$curl_data);
	# the match on success is a bit flaky still, because 4 properties are set, but only 1 has to succeed
	# to get a match on success. TODO
	if ($curl_returncode == 0 and $curl_output =~ /success/) {
		# printt (" - curl RC : $curl_returncode\n");
		# printt (" - curl out: $curl_output\n");
		return 1;
	} else {	
		# printt ("  a- light $light not adjusted\n");
		return 0;
	}	
}	

# talk to hue
sub curl_hue($$;$) {
	my $api_call  = shift; # everything after userid
	my $curl_meth = shift;
	my $curl_data = shift;
	my $host = $config{'config'}{'hue'}{'hue_host'};
	my $user = $config{'config'}{'hue'}{'hue_user'};
	my $curl_path    = "http://$host/api/${user}${api_call}";
	my $curl_output  = "";
	my $curl_RC      = 1;
	my $curl_command; 
	
	# a PUT of POST needs data with a -d option
	$curl_data    = "-d '" . $curl_data ."'" if ($curl_data); 
	$curl_command = "$curl -s -f -X $curl_meth -H 'Content-Type: application/json' $curl_data $curl_path";
	# printt ("curl    : $curl_command\n");
	
	if ($child_pid = open (CO,"-|","$curl_command")) {
		alarm($timeout);
		while (<CO>) {
			$curl_output .= $_;	
		}
		close(CO);
		$curl_RC = $?;
		alarm(0);
	}
	return ($curl_RC, $curl_output);
}	
	
# does something with the sun
sub get_suncycle($) {
	my $stamp  = shift; # now
	my $result = 0;
	$result = $suncycle{$stamp} if ($suncycle{$stamp});
	return $result;
}

# dummy for testing
sub get_cloudiness_testing() {
	my $clouds = 33;
	open(CL,"<clouds") or die ("$? - $!");
	while (<CL>) {
		$clouds = $1 if ($_ =~ /clouds:\s*(\d+)/);
	}
	close(CL);
	printt ("clouds: $clouds\n");			
	return $clouds;
}	
	

# does something with weather, returns clouds value (0-100) 
sub get_cloudiness() {
	my $return_value = 10; # arbitrary default to 10
	my $longitude = $config{'config'}{'location'}{'long'};
	my $latitude  = $config{'config'}{'location'}{'lat'};
	my $open_weather_map_url = "http://api.openweathermap.org/data/2.5/weather?mode=json&units=metric&lat=$latitude&lon=$longitude";
	my $curl_command = "$curl -s -f -X GET -H 'Content-Type: application/json' '$open_weather_map_url'";
	my $curl_output;
	my $curl_returncode;
	my ($now_dow,$now_year,$now_month,$now_day,$now_hour,$now_minute,$now_second) = (localtime)[6,5,4,3,2,1,0];
	my $time = sprintf("%02d:%02d:00", $now_hour, $now_minute);
	my $clouds = -1; # 100 = heavy overcast, 0 = clear sky, -1 = no value
	
	# setup a curl session to openweathermap
	if ($child_pid = open (CO,"-|","$curl_command")) {
		alarm($timeout);
		while (<CO>) {
			$curl_output .= $_;	
		}
		close(CO);
		$curl_returncode = $?;
		alarm(0);
	}

	# printt (" -- cloudscurl : $curl_command\n");
	# printt (" -- cloudsoutput : $curl_output\n");

	if ($curl_returncode == 0) {
		# ok
		($clouds) = ($curl_output =~ m/"clouds":{"all":(\d+)}/g);
		if ($clouds != -1) {
			$return_value = $clouds;
		}	
		printt ("CLOUDS: $return_value\n");			
	} else {
		# curl not ok
		printt (" !! curl to $open_weather_map_url failed\n");
	}	

	log_to_database('weather',"$time",{'percentage'=>$return_value});
	return $return_value;
}

# RC1 = ok, RC0 = notok
sub update_state_file($) {
	my $operation = shift;
	my $state_file = $config{'config'}{'logging'}{'hue_state'};
	my ($now_dow,$now_year,$now_month,$now_day,$now_hour,$now_minute,$now_second) = (localtime)[6,5,4,3,2,1,0];
	my $ts = sprintf ("%04d-%02d-%02d %02d:%02d:%02d", $now_year+1900,$now_month+1,$now_day,$now_hour,$now_minute,$now_second);
	if ($operation eq "update") {
		if (open (SF,">$state_file")) {
			print SF "$$ - $ts";
			close(SF);
			printt("State file updated ($$)\n");
			return 1;
		} else {
			printt("State file updated failed\n");
			return 0;
		}	
	} elsif ($operation eq "empty") {
		if (open (SF,">$state_file")) {
			close(SF);
			printt("State file emptied ($$)\n");
			return 1;
		} else {
			printt("State file empty failed\n");
			return 0;
		}	
	} else {
		printt("State file unknown request\n");
		return 0;
	} 
}

# RC1 = found another daemon, RC0 = no other daemon found
sub check_running_hued() {
	my $ps = "/bin/ps -C hued -o pid,start,cmd --no-heading";
	my $ps_output = "";
	my $rc = 0;
	
	if ($child_pid = open (PS,"-|","$ps")) {
		alarm($timeout);
		while (<PS>) {
			$ps_output .= $_;	
			my ($pid) = ($_ =~ /^\s*(\d+)\s+/);
			$rc++ if ($pid != $$);
		}
		close(PS);
		alarm(0);
	} else {
		return 42;
	}	
	printt ("check_running_hued => $ps_output\n") if ($rc > 0);
	return $rc;
}	


# nice and tidy
sub self_clean_log() {
	# get the needed parameters into single variables
	my $log_file   = $config{'config'}{'logging'}{'hue_log'};
	my $log_size   = $config{'config'}{'logging'}{'hue_log_size'};
	my $state_file = $config{'config'}{'logging'}{'hue_state'};
	my $clean_time = $config{'config'}{'logging'}{'hue_clean_time'};
	my ($now_dow,$now_year,$now_month,$now_day,$now_hour,$now_minute,$now_second) = (localtime)[6,5,4,3,2,1,0];
	my $ts = sprintf ("%04d-%02d-%02d %02d:%02d:%02d - ", $now_year+1900,$now_month+1,$now_day,$now_hour,$now_minute,$now_second);
	my @state = stat($log_file);
	my $run_cleanup = 0;

	# determine wether cleanup should run
	# first match size
	# then check if a timed cleanup is required
	if ($state[7] > $log_size) {
		$run_cleanup = 1;
	} elsif ($clean_time eq "weekly") {
		# only run if on monday
		if ($now_dow == 1) {
			$run_cleanup = 1;
		}	
	} elsif ($clean_time eq "daily") {
		# redundant check, but here for completeness
		$run_cleanup = 1;
	}

	# time to run
	if ($run_cleanup) {
		# shift copies
		if (copy("$log_file","$log_file.1")) {
			# empty the logfile, and print 
			if (open (LF, ">$log_file")) {
				print LF "$ts ==>> Self Cleaning occurred.\n";
				print LF "$ts ==>> Running PID: $$\n";
				close LF;
				# update state file to indicate self clean has run
				if (not update_state_file('update')) {
					printt ("WARNING: State File NOT updated\n");
				}	
			} else {
				printt ("WARNING: Log file copy not ok\n");
			}	
		} else {
			printt ("WARNING: Self Cleaning FAILED\n");
		}	
	}
}

# operates on global dbh
# RC1 = ok, RC0 = not ok
# NOTE: at this moment the usefulness of this function is unknown, but it can be expanded if needed.
sub self_clean_database() {
	# bail out if DB is not to be used, no error
	if ($config{'config'}{'db'}{'use'} eq "no") {
		return 1;
	}	
	my $query;
	my $result = 1;
	my @tables = ('sun','weather','lights_adjusted','lights_scheduled','lights_smoothed');
	
	foreach my $table (@tables) {
		# defrag
		$query = "ALTER TABLE `$table` ENGINE = InnoDB";
		if (my $sth = $dbh->prepare($query)) {
			if (not $sth->execute) {
				printt ("DB execute (cleanup $table):\n$DBI::errstr\n");
				$result = 0;
			}
		} else {
			printt ("DB prepare (cleanup $table):\n$DBI::errstr\n");
			$result = 0;
		}	
	}
	return $result;
}

# mail me some stuff
sub mail_info($$) {
        my $title = shift;
        my $message = shift;
        open (PH, "|/usr/sbin/sendmail -t");
	print (PH "To: $config{'config'}{'hue'}{'email'}\n");
	print (PH "From: hue\n");
	print (PH "Subject: $title\n\n");
	print (PH "$message\n\n");
	close(PH);
}

# push me some stuff
sub pushover($$$) {
	# if notifications are off, bail out now.
	if ($config{'config'}{'pushover'}{'notify'} eq "no") {
		return 0;
	}	
	my $title   = shift;
        my $message = shift;
	my $prio    = shift;
	my $url     = $config{'config'}{'pushover'}{'url'};
	my $token   = $config{'config'}{'pushover'}{'token'};
	my $user    = $config{'config'}{'pushover'}{'user'};
	my $curl_output  = "";
	my $curl_RC      = 1;
	my $curl_command; 
	
	$curl_command = "$curl -s -f -X POST -d 'title=$title' -d 'message=$message' -d 'priority=$prio' -d 'sound=gamelan' -d 'token=$token' -d 'user=$user' $url";
	# printt ("curl    : $curl_command\n");
	
	# TODO: verify output, as requested in the pushover API documentation
	if ($child_pid = open (CO,"-|","$curl_command")) {
		alarm($timeout);
		while (<CO>) {
			$curl_output .= $_;	
		}
		close(CO);
		$curl_RC = $?;
		alarm(0);
	}
	# printt ("   - curl RC : $curl_RC\n");
	# printt ("  x- curl out: $curl_output\n");
	return ($curl_RC, $curl_output);
}	

# SIGNAL handlers
sub signal_term {
	printt ("### Caught TERM / INT \n");
      	$i_should_run = 0;
	# mail_info("Hued ended","PID: $$")
	# pushover("Hued ended", "PID: $$","1")
}

sub signal_hup {
	printt ("### Caught HUP - reloading config \n");
	$i_should_reload_config = 1;
	$i_caught_a_signal = 1;
}

sub signal_usr1 {
	printt ("### Caught USR1 - enforcing light settings\n");
	$i_caught_a_signal = 1;
	$override = 1;
} 

sub kill_child() {
	my $count = 0;
	$count = kill ("TERM", $child_pid);
	if ($count > 0) {
		printt ("command with PID $child_pid, killed due to timeout\n");
	} else {	
		printt ("command with PID $child_pid, failed to be killed\n");
	}	
}


# loads config, but empties it first
sub load_config() {
	%config = ();
	%lights = ();

	# some needed defaults:
	$config{'config'}{'logging'}{'hue_log'}   = "/var/log/hue/hued.log";
	$config{'config'}{'logging'}{'hue_state'} = "/var/log/hue/hued.state";
  
  	# open the config file (in same dir as daemon - for now)
	open_hue_file("/usr/local/etc/hue.conf");
}	
	
# output redirection
sub set_STDOUT($) {
	my $outfile = shift;
	open(FOUT, ">>$outfile") || die "\nCouldn't open logfile\n";
	*STDOUT = *FOUT;	
	$| = 1;
}

sub set_STDERR($) {
	my $outfile = shift;
	open(FERR, ">>$outfile") || die "\nCouldn't open logfile\n";
        *STDERR = *FERR;
	$| = 1;
}

# print with a timestamp
sub printt($) {
	my $message=shift;
	my ($year,$month,$day,$hour,$minute,$second) = (localtime)[5,4,3,2,1,0];
	printf ("%04d-%02d-%02d %02d:%02d:%02d - ",$year+1900,$month+1,$day,$hour,$minute,$second);
	print $message;
}

#--------------------------
# main
#--------------------------

# unbuffer output
$| = 1;

load_config();

printt("pre-fork PID: $$\n");

# daemonize?
if ($config{'config'}{'hue'}{'daemon'} eq 'yes') {
	# daemonize this! (from the Perl Cookbook)
	# fork
	$pid = fork;
	# exit parent
	exit if $pid;
	# check
	die "Couldn't fork $!\n" unless defined($pid);
	# diassociate from controlling terminal..
	POSIX:setsid() or die "Can't start a new session $!\n";
	printt ("hued started - DAEMON MODE - PID: $$\n");
	if (check_running_hued()) {
		printt ("hued terminated - another daemon found\n");
		exit 1;
	}
	set_STDERR($config{'config'}{'logging'}{'hue_log'});
	set_STDOUT($config{'config'}{'logging'}{'hue_log'});
} else {	
	printt ("hued started - CONSOLE MODE - PID: $$\n");
}	
# end of daemonisation

# catch signals
$SIG{INT} = $SIG{TERM} = \&signal_term;
$SIG{HUP} = \&signal_hup;
$SIG{USR1} = \&signal_usr1;
$SIG{ALRM} = \&kill_child;

# rudimentary handling of DB connection
if (not connect_database()) {
	printt ("Program terminated, DB not connected\n");
	exit 1;
}

calculate_suncycle(\%suncycle);
calculate_default_schedules();
smooth_default_schedules();
update_tsv_files();
## for debugging the flow of values
# open (D,">dump");
# print D Dumper(\%{$lights{'schedules'}{1}});
# close (D);

$clouds = get_cloudiness();

$i_should_run=1;
$i_should_reload_config=0;
$i_caught_a_signal=0;

# if we get here, starting probably worked ;)
# write the PID and some stuff to state file
update_state_file('update');
printt ("Waiting for first trigger (10 seconds)\n");

while ($i_should_run) {
	# wait 10 seconds -> run_schedule_check every 10 seconds.
	# later on the minute is checked to prevent
	# running multiple times during the same minute.
	# this results in the check always running somewhere during the beginning (10 secs) of the minute.
	select (undef,undef,undef,10);

	# what is now?
	my ($now_dow,$now_year,$now_month,$now_day,$now_hour,$now_minute,$now_second) = (localtime)[6,5,4,3,2,1,0];

	# run_schedule_check every minute, but only once a minute
	# that means only trigger when the minute has changed
	if ($now_minute != $last_minute) {
		# printt ("MARK ----\n");
		# every 10 minutes (but on the third minute), update clouds value, unless the sun is down
		if (($now_minute % 10 == 3) and (get_suncycle(mins("$now_hour:$now_minute")) < 100)) {
			$clouds = get_cloudiness();
		}	
		run_schedule_check();

		# at 0:00 in the morning, do selfcleaning, and calculate the suncycle and schedules for the day
		if (($now_hour == 0) and ($now_minute == 0)) {
			self_clean_log();
			self_clean_database();
			calculate_suncycle(\%suncycle);
			calculate_default_schedules();
			smooth_default_schedules();
			update_tsv_files();
		}	
		$last_minute = $now_minute;
		# reset override
		$override = 0;
	}	

	# now handle all other stuff that needs to be taken care of
	if ($i_should_reload_config) {
		load_config();
		calculate_suncycle(\%suncycle);
		calculate_default_schedules();
		smooth_default_schedules();
		update_tsv_files();
	}
	
	$i_should_reload_config=0;
	$i_caught_a_signal=0;

}

update_state_file('empty');
printt ("hued ended succesfully, PID: $$\n");
exit 0;

# bye now
